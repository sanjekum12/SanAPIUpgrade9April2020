@isTest(SeeAllData=true)
private class WORD_ManageMTTSRules_UT 
{

    static testMethod void WORD_ManageMTTSRules_Test()
    {
        PageReference pageRef1 = new PageReference('Page.SVMXC.WORD_ManageMTTSRules');
        Test.setCurrentPageReference(pageRef1);
        SVMXC.WORD_ManageMTTSRules classObj = new SVMXC.WORD_ManageMTTSRules();
        System.assertNotEquals(true, classObj == null);
        System.assertEquals(true, classObj != null);
    }
   static testMethod void WORD_ManageMTTSRulesTest() {
    
        WORD_ManageMTTSRules MRule = new WORD_ManageMTTSRules();        
        RecordType rtype = [select id from RecordType where Name=:'SVMX Rule'];     
        SVMXC__ServiceMax_Processes__c prs = new SVMXC__ServiceMax_Processes__c();
        prs.RecordTypeId = rtype.Id;
        prs.SVMXC__ProcessID__c='PROCESS11';
        prs.SVMXC__SettingId__c = 'PROCESS11';
        prs.SVMXC__MapID__c='PROCESS11';
        prs.SVMXC__Name__c = 'PROCESS22';
        prs.SVMXC__Name__c = 'New Rule Test';
        prs.SVMXC__Description__c='Description Rule Test';
        prs.SVMXC__Rule_Type__c = 'MTTS';
        prs.SVMXC__Select__c = true;
        prs.SVMXC__Sequence__c=1;     
        insert prs;

        SVMXC__ServiceMax_Processes__c prs2 = new SVMXC__ServiceMax_Processes__c();
        prs2.RecordTypeId = rtype.Id;
        prs2.SVMXC__ProcessID__c='PROCESS12';
        prs2.SVMXC__SettingId__c = 'PROCESS12';
        prs2.SVMXC__MapID__c='PROCESS12';
        prs2.SVMXC__Name__c = 'PROCESS23';
        prs2.SVMXC__Name__c = 'New Rule Test';
        prs2.SVMXC__Description__c='Description Rule Test';
        prs2.SVMXC__Rule_Type__c = 'MTTS';
        prs2.SVMXC__Select__c = true;
        prs2.SVMXC__Sequence__c=2;        
        insert prs2;
        
        SVMXC__ServiceMax_Processes__c prs3 = new SVMXC__ServiceMax_Processes__c();
        prs3.RecordTypeId = rtype.Id;
        prs3.SVMXC__ProcessID__c='PROCESS11';
        prs3.SVMXC__SettingId__c = 'PROCESS11';
        prs3.SVMXC__MapID__c='PROCESS11';
        prs3.SVMXC__Name__c = 'TestDemoProcess';
        prs3.SVMXC__Description__c='Description Rule Test';
        prs3.SVMXC__Rule_Type__c = 'MTTS';
        prs3.SVMXC__Select__c = false;
        prs3.SVMXC__Sequence__c=3;     
        insert prs3;
        
        SVMXC__ServiceMax_Processes__c prs4 = new SVMXC__ServiceMax_Processes__c();
        prs4.RecordTypeId = rtype.Id;
        prs4.SVMXC__Name__c = 'TestDemoProcess';
        prs4.SVMXC__Rule_Type__c = 'MTTS';
        prs4.SVMXC__Select__c = false;
        prs4.SVMXC__Sequence__c=4;     
        insert prs4;
        
        
        //WORD_ManageMTTSRules MRule = new WORD_ManageMTTSRules();
        System.assertEquals('New Rule Test', prs.SVMXC__Name__c);
        test.startTest();
        //MRule.MTTSRuleList.clear();
        MRule.MTTSRuleList.add(prs);
        system.assert(MRule.getTAG001()!=null,'TAG001 assertion failed');
        system.assert(MRule.getTAG002()!=null,'TAG002 assertion failed');
        system.assert(MRule.getTAG003()!=null,'TAG003 assertion failed');
        system.assert(MRule.getTAG004()!=null,'TAG004 assertion failed');
        system.assert(MRule.getTAG005()!=null,'TAG005 assertion failed');
        system.assert(MRule.getTAG006()!=null,'TAG006 assertion failed');
        system.assert(MRule.getTAG007()!=null,'TAG007 assertion failed');
        system.assert(MRule.getTAG008()!=null,'TAG008 assertion failed');
        system.assert(MRule.getTAG009()!=null,'TAG009 assertion failed');
        system.assert(MRule.getTAG010()!=null,'TAG010 assertion failed');
        system.assert(MRule.getTAG011()!=null,'TAG011 assertion failed');
        system.assert(MRule.getTAG012()!=null,'TAG012 assertion failed');
        system.assert(MRule.getTAG013()!=null,'TAG013 assertion failed');
        system.assert(MRule.getTAG014()!=null,'TAG014 assertion failed');
        system.assert(MRule.getTAG015()!=null,'TAG015 assertion failed');
        system.assert(MRule.getTAG016()!=null,'TAG016 assertion failed');
        system.assert(MRule.getTAG017()!=null,'TAG017 assertion failed');
        system.assert(MRule.getTAG018()!=null,'TAG018 assertion failed');
        system.assert(MRule.getTAG019()!=null,'TAG019 assertion failed');
        system.assert(MRule.getTAG020()!=null,'TAG020 assertion failed');
        system.assert(MRule.getTAG021()!=null,'TAG021 assertion failed');
        system.assert(MRule.getTAG022()!=null,'TAG022 assertion failed');
        system.assert(MRule.getTAG023()!=null,'TAG023 assertion failed');
        system.assert(MRule.getTAG024()!=null,'TAG024 assertion failed');
        system.assert(MRule.getTAG025()!=null,'TAG025 assertion failed');
        //MRule.svmxTagList.clear();
        system.assert(MRule.getTAG001()!=null,'TAG001 assertion failed');
        system.assert(MRule.getTAG002()!=null,'TAG002 assertion failed');
        system.assert(MRule.getTAG003()!=null,'TAG003 assertion failed');
        system.assert(MRule.getTAG004()!=null,'TAG004 assertion failed');
        system.assert(MRule.getTAG005()!=null,'TAG005 assertion failed');
        system.assert(MRule.getTAG006()!=null,'TAG006 assertion failed');
        system.assert(MRule.getTAG007()!=null,'TAG007 assertion failed');
        system.assert(MRule.getTAG008()!=null,'TAG008 assertion failed');
        system.assert(MRule.getTAG009()!=null,'TAG009 assertion failed');
        system.assert(MRule.getTAG010()!=null,'TAG010 assertion failed');
        system.assert(MRule.getTAG011()!=null,'TAG011 assertion failed');
        system.assert(MRule.getTAG012()!=null,'TAG012 assertion failed');
        system.assert(MRule.getTAG013()!=null,'TAG013 assertion failed');
        system.assert(MRule.getTAG014()!=null,'TAG014 assertion failed');
        system.assert(MRule.getTAG015()!=null,'TAG015 assertion failed');
        system.assert(MRule.getTAG016()!=null,'TAG016 assertion failed');
        system.assert(MRule.getTAG017()!=null,'TAG017 assertion failed');
        system.assert(MRule.getTAG018()!=null,'TAG018 assertion failed');
        system.assert(MRule.getTAG019()!=null,'TAG019 assertion failed');
        system.assert(MRule.getTAG020()!=null,'TAG020 assertion failed');
        system.assert(MRule.getTAG021()!=null,'TAG021 assertion failed');
        system.assert(MRule.getTAG022()!=null,'TAG022 assertion failed');
        system.assert(MRule.getTAG023()!=null,'TAG023 assertion failed');
        system.assert(MRule.getTAG024()!=null,'TAG024 assertion failed');
        system.assert(MRule.getTAG025()!=null,'TAG025 assertion failed');
        system.assert(MRule.getTAG026()!=null,'TAG025 assertion failed');
        system.assert(MRule.getTAG027()!=null,'TAG025 assertion failed');
        system.assert(MRule.getTAG028()!=null,'TAG025 assertion failed');
        system.assert(MRule.getTAG029()!=null,'TAG025 assertion failed');
        system.assert(MRule.getTAG030()!=null,'TAG025 assertion failed');
        MRule.getHLPURL();        
        MRule.getCriExpressions();
        MRule.getMTTSRuleProcess();
        MRule.setMTTSRuleProcess(prs);
        MRule.getDisbaleChkBox();
        MRule.setDisbaleChkBox(false);  
        MRule.getshowRule();
        MRule.setshowRule(false);   
        MRule.getDelPRCountRec();   
        MRule.setDelPRCountRec(false);
        MRule.getIsRuleBlock();
        MRule.setIsRuleBlock(false);    
        MRule.getIsPartsBlock();
        MRule.setIsPartsBlock(false);           
        MRule.getDisbleNewBttn();
        MRule.setDisbleNewBttn(false);
        MRule.getDisbleEdtBttn();
        MRule.setDisbleEdtBttn(false);
        MRule.getDisbleDelBttn();
        MRule.setDisbleDelBttn(false);      
        MRule.getMTTSRuleList();        
        MRule.RuleNameMap.put(prs.Name,1);      
        MRule.SVMX_EdtMTTSRule();       
        MRule.SVMX_AddNewMTTSRule();        
        MRule.SVMX_SaveProcessRulewithChild();
        MRule.SVMX_DelMTTSRule();
        MRule.SVMX_Cancel();
        MRule.SVMX_GoSetupHome();
        
        MRule.getCheckAllRules();
        MRule.setCheckAllRules(false);
        MRule.getdisplaySeqPopup();
        MRule.getDisbleRuleSeqBttn();
        MRule.setDisbleRuleSeqBttn(false);
        MRule.getDisableCancelBttn();
        MRule.setDisableCancelBttn(false);
        
        Map<String,Schema.Displaytype> m = new Map<String,Schema.Displaytype>();
        Map<String,String> m2 = new Map<String,String>();
        map<string,SelectOption> m3 = new map<string,SelectOption>();
        Schema.Displaytype DT;
        MRule.getobjSVMXPro();
        MRule.setobjSVMXPro(prs);
        MRule.getSelectedIndex();
        MRule.setSelectedIndex ('1');
        MRule.getlstHdrObjOpt();
        MRule.getlstLineObjOpt();
        MRule.RetriveField('service_order__c', MRule.Hdrfldlist, MRule.CriExpressions.mapFieldDispType, MRule.CriExpressions.FieldApiLable);
        MRule.RetriveField2('service_order__c', MRule.Hdrfldlist,m,m2,DT);
        MRule.RetriveField('service_order__c', MRule.Hdrfldlist,m,m2,DT,null);
        MRule.getHdrFldlist();
        MRule.OnHdrObjSelect();
        MRule.getSelectedID();
        MRule.setSelectedID('');
        MRule.getSelectedLabel();
        MRule.setSelectedLabel('Name');
        //MRule.getSR ();
        //MRule.isDateSearch = true;
        //MRule.isSearch = true;
        //MRule.getisDateSearch();
       // MRule.getisSearch();
       // MRule.isDateSearch = false;
       // MRule.isSearch = false;     
       // MRule.getDisableValue();        
        MRule.HdrADDRow();
        MRule.HdrDeleteRow();
        MRule.ClearSelOptMap (m3);
        MRule.ClearSelOptList(MRule.Hdrfldlist);
        MRule.getDisbleSaveBttn();
        MRule.getDisbaleActiveChkBox();
        MRule.setDisbleSaveBttn(true);
        MRule.setDisbaleActiveChkBox(true);
        MRule.AddException('Test');
        MRule.IsValidString('Test');
        MRule.IsValidString('');
        MRule.SVMX_ValidateRuleName(prs3);
        MRule.SVMX_ValidateRuleName(prs4);
        MRule.SVMX_OrderSequence();
        MRule.getSeqoptions();
        MRule.getitems();
        //MRule.shuffle(0,true);
        List<String> ListItems = new List<String>();
        ListItems.add(prs.Id);
        ListItems.add(prs2.Id);
        ListItems.add(prs3.Id);
        ListItems.add(prs4.Id);
        //ListItems.add('Item3');
        //ListItems.add('Item4');
        MRule.setitems(ListItems);
        MRule.UP();
        MRule.Down();
        MRule.Top();
        MRule.Bottom();
        MRule.SVMX_SaveSequence();
        MRule.getSR();
        MRule.HdrFind();
        MRule.HdrFindDate();
    MRule.Do_Search();
    MRule.Do_Select();
    MRule.Do_CancelSearch();
    MRule.getisSearch();
    MRule.getisDateSearch();
    MRule.OnselectRecord();
    MRule.OnselectCurrentUser();
    MRule.OnselectRecordOwner();
    MRule.OnHdrEntryCriFieldSelect();
    MRule.find(new COMM_SVMXC_Search_Expressions());
    MRule.getDisableValue();
    
        test.stopTest();
        
    }
    
    
}