/**
 * This class collects Job and Technician/Territory related data from the SFDC Events & SVMX Events generated by the latest Scheduling Run
 *
 * Input to the batch is the list of records which contains data from SFDC Event or SVMX Event
 *
 * @author Somabha B
 * @version 1.0
 * @since 2016
 */
global class SPM_Scheduling_Source_Events implements Database.Batchable<SObject>, Database.Stateful {

    /**
     * Holds the reference to the query being executed.
     **/
    private String query = '';

    /**
     * Holds the jobId for which the sourcing is started.
     **/
    private String jobId = '';

    /**
     * Holds the Id to the summary record.
     **/
    private String jobSummaryId;

    /**
     * Holds the reference to the processId for which sourcing is started.
     */
    private String processId = '';
    
    /**
     * Holds the reference to userIds of technicians.
     **/
    private List<String> userIds = null;
    
    /**
     * Holds the reference to Ids of technicians.
     **/
    private List<String> technicianIds = null;

    /**
     * Constructor for the batch class. Initializes the query, jobId and job-summaryId.
     **/
    global SPM_Scheduling_Source_Events(String query, String jobId, String jobSummaryId) {
        this.query = query;
        this.jobId = jobId;
        this.jobSummaryId = jobSummaryId;
    }
	
    global void setTechnicianIds(List<String> values) {
        technicianIds = values;
    }
    
    global void setUserIds(List<String> values) {
        userIds = values;
    }

    /**
     * Batch execution initialization is done in this method
     *
     * @param  context        - BatchableContext
     * @return                - QueryLocator
     */
    global Database.QueryLocator start(Database.BatchableContext context) {
        System.debug(LoggingLevel.DEBUG, 'Batch start - Query: ' + query);
        System.debug(LoggingLevel.DEBUG, 'technicianIds: ' + technicianIds);
        System.debug(LoggingLevel.DEBUG, 'userIds: ' + userIds);
        
        //Check for user access before quering the fields.
        List<String> queryFields = new List<String> {'SVMXC__SVMX_Process__r.Id'};
        if( ! COMM_SecurityUtils.getInstance().verifyFieldAccess( 'SVMXC__SVMX_Jobs__c', queryFields, COMM_SecurityUtils.Access.Accessible ) ) {
            throw new COMM_SecurityUtils.SecurityAccessException( System.Label.COMM001_TAG142 );
        }
        
        SVMXC__SVMX_Jobs__c job = [Select SVMXC__SVMX_Process__r.Id from SVMXC__SVMX_Jobs__c Where Id = :jobId];
        processId = job.SVMXC__SVMX_Process__r.Id;
        System.debug(LoggingLevel.DEBUG, 'ProcessId - ' + processId);
        return Database.getQueryLocator(query);
    }

    /**
     * Fetch the Technician Id and the associated User Id
     */
    private Map<Id, Id> populateTechnicianId(List<String> userIds) {
        System.debug(LoggingLevel.DEBUG, 'SPM_Scheduling_Source_Events.populateTechnicianId() - enter');
        System.debug(LoggingLevel.DEBUG, 'Loading the technicians for the passed in user-id - ' + userIds);
        
        //Check for user access before quering the fields.
        List<String> queryFields = new List<String> {'SVMXC__Salesforce_User__c','Id'};
        if( ! COMM_SecurityUtils.getInstance().verifyFieldAccess( 'SVMXC__Service_Group_Members__c', queryFields, COMM_SecurityUtils.Access.Accessible ) ) {
            throw new COMM_SecurityUtils.SecurityAccessException( System.Label.COMM001_TAG142 );
        }
        
        List<SVMXC__Service_Group_Members__c> technicians = [select SVMXC__Salesforce_User__c, Id from SVMXC__Service_Group_Members__c where SVMXC__Salesforce_User__c in: userIds];
        Map<Id, Id> technicianUserMap = new Map<Id, Id>();
        for (SVMXC__Service_Group_Members__c tech : technicians) {
            technicianUserMap.put(tech.SVMXC__Salesforce_User__c, tech.Id);
        }
        System.debug(LoggingLevel.DEBUG, 'SPM_Scheduling_Source_Events.populateTechnicianId() - exit');
        return technicianUserMap;
    }

    /**
     * Validate if the current job is the latest for the process.
     **/
    private boolean isLatestJob() {
        System.debug(LoggingLevel.DEBUG, 'SPM_Scheduling_Source_Events.isLatestJob() - enter');
        System.debug(LoggingLevel.DEBUG, 'Passed in jobId - ' + jobId);
        
        //Check for user access before quering the fields.
        List<String> queryFields = new List<String> {'Id'};
        if( ! COMM_SecurityUtils.getInstance().verifyFieldAccess( 'SVMXC__SVMX_Jobs__c', queryFields, COMM_SecurityUtils.Access.Accessible ) ) {
            throw new COMM_SecurityUtils.SecurityAccessException( System.Label.COMM001_TAG142 );
        }
        
        SVMXC__SVMX_Jobs__c job = [Select Id from SVMXC__SVMX_Jobs__c where SVMXC__OptiMax_Message__c = 'Success' and SVMXC__SVMX_Process__r.Id = :processId Order by Name Desc limit 1];
        System.debug(LoggingLevel.DEBUG, 'Latest job.Id from database - ' + job.Id);

        System.debug(LoggingLevel.DEBUG, 'SPM_Scheduling_Source_Events.isLatestJob() - exit');
        return job.Id == jobId;
    }


    /**
     * Check if the current job for which the sourcing is performed is latest. We will stop processing as soon as we find any other
     * latest job run for the current process in context. If we find the process is dirty then we delete the summary record so that
     * all the computations are deleted.
     **/
    private boolean isDataDirty() {
        System.debug( LoggingLevel.DEBUG, 'SPM_Scheduling_Source_Events.isDataDirty() - enter');
        System.debug( LoggingLevel.DEBUG, 'jobId-' + jobId + ' processId-' + processId + ' jobSummaryId-' + jobSummaryId);
        if (!isLatestJob()) {
            try{
                
                //Check for user access before quering the fields.
                List<String> queryFields = new List<String> {'Id'};
                if( ! COMM_SecurityUtils.getInstance().verifyFieldAccess( 'SVMXC__SM_Scheduling_Job_Summary__c', queryFields, COMM_SecurityUtils.Access.Accessible ) ) {
                    throw new COMM_SecurityUtils.SecurityAccessException( System.Label.COMM001_TAG142 );
                }
                
                SVMXC__SM_Scheduling_Job_Summary__c jobSummary = [select Id from SVMXC__SM_Scheduling_Job_Summary__c where Id = : jobSummaryId];
                //There are chances that both the sourcing batches to run parallely. We need to do a check before delete. 
                //If the previous job had completed and when we notice this problem during second batch run then we delete jobsummary so that earlier computed batch data is deleted.
                if (jobSummary != null) {
                     //delete the previously computed summary
                    if(COMM_SecurityUtils.getInstance().isDeletableObject('SVMXC__SM_Scheduling_Job_Summary__c')) {
                        delete jobSummary;
                    } else {
                        throw new COMM_SecurityUtils.SecurityAccessException(System.Label.COMM001_TAG142);
                    }
                }
                System.debug(LoggingLevel.Error, 'JobSummary removed as work-order assignment changed while sourcing the objects');
            } catch(Exception ex) {
                System.debug(LoggingLevel.Error, 'Exception while deleting the job-summary record - ' + ex.getMessage());
            }
            return true;
        } else {
            System.debug( LoggingLevel.DEBUG, 'Data is sourced for the latest job');
        }
        System.debug( LoggingLevel.DEBUG, 'SPM_Scheduling_Source_Events.isDataDirty() - exit');
        return false;
    }

    /**
     * Batch executor for each batch of events
     *
     * @param  records        - List of events
     * @return                - void
     */
    global void execute(Database.BatchableContext context, List<sObject> records) {

        System.debug( LoggingLevel.DEBUG, 'SPM_Scheduling_Source_Events.execute() - enter; records: ' + records.size() );

        // Check if the list of records is empty or not
        if (records != null || records.size() > 0) {

            // Containers for the Events and Job Summary
            List<SVMXC__SM_Scheduling_Event_Summary__c>  eventsSummaryList = new List<SVMXC__SM_Scheduling_Event_Summary__c>();
            List<SVMXC__SM_Scheduling_Job_Summary__c> jobSummaryList = new List<SVMXC__SM_Scheduling_Job_Summary__c>();

            // Use instance of to find out event record type
            if (records.get(0) instanceof Event) {

                System.debug( LoggingLevel.DEBUG, 'execute(): record type is Event' );
                List<Event> eventsList  = (List<Event>)(records);
                List<Id> userIds = new List<Id>();

                Map<Id, Id> mapEventWorkOrderIds = new Map<Id, Id>();
                set<Id> setWOIds = new set<Id>();

                // Fetch the technician ids and WO ids for all the events
                for (Event event : eventsList) {
                    userIds.add(event.ownerId);
                    if (event.WhatId != NULL) {
                        mapEventWorkOrderIds.put(event.Id, event.WhatId);
                        setWOIds.add(event.WhatId);
                    }
                }


                Map<Id, Id> technicianUserMap = populateTechnicianId(userIds);

                try {
                    if (eventsList != null && eventsList.size() > 0) {
                        System.debug( LoggingLevel.DEBUG, 'execute(): Events list is not empty. Start Processing' );

                        Map<Id, SVMXC__Service_Order__c> mapAllEventWorkOrders = new Map<Id, SVMXC__Service_Order__c>();

                        // Fetch WO details like Dispatch Process name & the WO type information
                        mapAllEventWorkOrders.putAll([Select Id, SVMXC__Dispatch_Process__c, SVMXC__Locked_By_DC__c from SVMXC__Service_Order__c where Id IN: setWOIds]);

                        // Fetch details from SFDC Events
                        for (Event eventRecord : eventsList) {

                            SVMXC__SM_Scheduling_Event_Summary__c eventSummary = new SVMXC__SM_Scheduling_Event_Summary__c();

                            // read events details and create list of event summary
                            eventSummary.SVMXC__SM_JobId__c = jobId;
                            eventSummary.SVMXC__SM_Job_Summary__c = jobSummaryId;
                            eventSummary.SVMXC__SM_Event_Date__c = eventRecord.StartDateTime.Date();
                            SVMXC__Service_Order__c objWorkOrder = mapAllEventWorkOrders.get(eventRecord.WhatId);

                            // Find out the WO type
                            if (objWorkOrder != null && objWorkOrder.SVMXC__Locked_By_DC__c == true) {
                                eventSummary.SVMXC__SM_Event_Type__c = SPM_Consts.EXTERNAL_WORK_ORDER_ACTIVITY;
                            } else {
                                eventSummary.SVMXC__SM_Event_Type__c = eventRecord.Type;
                            }
                            eventSummary.SVMXC__SM_Event_Duration__c = ((eventRecord.EndDateTime.getTime()) / 1000 / 60)
                                    - ((eventRecord.StartDateTime.getTime()) / 1000 / 60);
                            eventSummary.SVMXC__SM_Drive_Time__c = eventRecord.SVMXC__Driving_Time_Home__c + eventRecord.SVMXC__Driving_Time__c;
                            eventSummary.SVMXC__SM_Overhead_time__c = eventRecord.SVMXC__Overhead_Time_Before__c + eventRecord.SVMXC__Overhead_Time_After__c ;
                            eventSummary.SVMXC__SM_Break_Minutes__c = eventRecord.SVMXC__Break_Time_Total__c;
                            eventSummary.SVMXC__SM_Technician__c = technicianUserMap.get(eventRecord.OwnerId);

                            // Add to the list of events summary
                            eventsSummaryList.add( eventSummary );
                        }
                    }

                    // Insert records to source objects
                    if ( !eventsSummaryList.isEmpty() ) {
                        if (isDataDirty()) {
                            system.debug(LoggingLevel.INFO, 'Aborting the sourcing job on SFDC Events');
                            System.abortJob(context.getJobId());  //Abort Job
                        } else {
                            //Security check
                            if( COMM_SecurityUtils.getInstance().verifyFieldAccess( eventsSummaryList, COMM_SecurityUtils.Access.Createable ) ) {
                                insert eventsSummaryList;
                            } else {
                                throw new COMM_SecurityUtils.SecurityAccessException( System.Label.COMM001_TAG142 );
                            }
                            system.debug( LoggingLevel.DEBUG, 'Total number of events summary records inserted are : ' + eventsSummaryList.size() );
                        }
                    } else {
                        system.debug( LoggingLevel.DEBUG, 'Insert failed! Events Summary list is empty!' );
                    }
                } catch (exception ex) {
                    System.debug(LoggingLevel.ERROR, 'Exception! - ' + ex.getMessage());
                }
            }
            // Fetch details from SVMX Events
            else if (records.get(0) instanceof SVMXC__SVMX_Event__c) {

                System.debug( LoggingLevel.DEBUG, 'execute(): record type is ServiceMax Event' );

                List<SVMXC__SVMX_Event__c>  svmxEventsList  = (List<SVMXC__SVMX_Event__c>)(records);
                Map<Id, Id> mapSVMXEventWorkOrderIds = new Map<Id, Id>();
                set<Id> setWOIds = new set<Id>();

                // Fetch the technician ids and WO ids for all the events
                for (SVMXC__SVMX_Event__c event : svmxEventsList) {
                    if (event.SVMXC__WhatId__c != NULL) {
                        mapSVMXEventWorkOrderIds.put(event.Id, event.SVMXC__WhatId__c);
                        setWOIds.add(event.SVMXC__WhatId__c);
                    }
                }

                try {
                    if (svmxEventsList != null && svmxEventsList.size() > 0) {
                        System.debug( LoggingLevel.DEBUG, 'execute(): SVMX Events list is not empty. Start Processing' );

                        Map<Id, SVMXC__Service_Order__c> mapAllEventWorkOrders = new Map<Id, SVMXC__Service_Order__c>();

                        mapAllEventWorkOrders.putAll([Select Id, SVMXC__Dispatch_Process__c, SVMXC__Locked_By_DC__c
                                                      from SVMXC__Service_Order__c where Id IN: setWOIds]);

                        // Loop through the list of SVMX events and read details
                        for (SVMXC__SVMX_Event__c svmxEvent : svmxEventsList) {
                            SVMXC__SM_Scheduling_Event_Summary__c eventSummary = new SVMXC__SM_Scheduling_Event_Summary__c();

                            // read events details and create list of event summary
                            eventSummary.SVMXC__SM_JobId__c = jobId;
                            eventSummary.SVMXC__SM_Job_Summary__c = jobSummaryId;
                            eventSummary.SVMXC__SM_Event_Date__c = svmxEvent.SVMXC__StartDateTime__c.date();

                            SVMXC__Service_Order__c objWorkOrder = mapAllEventWorkOrders.get(svmxEvent.SVMXC__WhatId__c);

                            // Find out the WO type
                            if (objWorkOrder != null && objWorkOrder.SVMXC__Locked_By_DC__c == true) {
                                eventSummary.SVMXC__SM_Event_Type__c = SPM_Consts.EXTERNAL_WORK_ORDER_ACTIVITY;
                            } else {
                                eventSummary.SVMXC__SM_Event_Type__c = svmxEvent.SVMXC__Type__c;
                            }

                            eventSummary.SVMXC__SM_Event_Duration__c = ((svmxEvent.SVMXC__EndDateTime__c.getTime()) / 1000 / 60)
                                    - ((svmxEvent.SVMXC__StartDateTime__c.getTime()) / 1000 / 60);
                            eventSummary.SVMXC__SM_Drive_Time__c = Integer.valueOf(svmxEvent.SVMXC__Driving_Time_Home__c) + Integer.valueOf(svmxEvent.SVMXC__Driving_Time__c);
                            eventSummary.SVMXC__SM_Overhead_time__c = Integer.valueOf(svmxEvent.SVMXC__Overhead_Time_Before__c) + Integer.valueOf(svmxEvent.SVMXC__Overhead_Time_After__c) ;
                            eventSummary.SVMXC__SM_Break_Minutes__c = svmxEvent.SVMXC__Break_Time_Total__c;
                            eventSummary.SVMXC__SM_Technician__c = svmxEvent.SVMXC__Technician__c;
                            eventsSummaryList.add( eventSummary );
                        }

                        // Insert records to source objects
                        if (!eventsSummaryList.isEmpty()) {
                            if (isDataDirty()) {
                                system.debug(LoggingLevel.INFO, 'Aborting the sourcing job on SVMX Events');
                                System.abortJob(context.getJobId()); //Abort Job
                            } else {
                                //insert eventsSummaryList;
                                //Security check
                                if( COMM_SecurityUtils.getInstance().verifyFieldAccess( eventsSummaryList, COMM_SecurityUtils.Access.Createable ) ) {
                                    insert eventsSummaryList;
                                } else {
                                    throw new COMM_SecurityUtils.SecurityAccessException( System.Label.COMM001_TAG142 );
                                }
                                system.debug( LoggingLevel.DEBUG, 'Number of Summary Events records inserted are : ' + eventsSummaryList.size() );
                            }
                        } else {
                            system.debug( LoggingLevel.DEBUG, 'Insert failed! Events Summary list is empty!' );
                        }
                    }
                } catch (exception ex) {
                    System.debug(LoggingLevel.ERROR, 'Exception! - ' + ex.getMessage());
                }
            } else {
                System.debug( LoggingLevel.DEBUG, 'execute(): Neither SFDC Event nor ServiceMax Events found!!!! ' );
            }
        } else {
            System.debug( LoggingLevel.DEBUG, 'execute() - Empty list of records!');
        }
        System.debug( LoggingLevel.DEBUG, 'SPM_Scheduling_Source_Events.execute() - exit' );
    }

    /**
     * Batch finalization method
     *
     * @param  context        - BatchableContext
     * @return                - void
     */
    global void finish(Database.BatchableContext context) {
        System.debug( LoggingLevel.DEBUG, 'SPM_Scheduling_Source_Events.finish() - entered!');
    }
}