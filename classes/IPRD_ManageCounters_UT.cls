@isTest
Private class IPRD_ManageCounters_UT{

static testMethod void IPRD_ManageCountersUnitTest() {
    
    RecordType RType = new RecordType();
    RecordType RTypedef = new RecordType();
    RecordType RTypeReading = new RecordType();
    Rtype = [select Id from RecordType where Name=:'SVMX Rule' and SobjectType=:'SVMXC__ServiceMax_Processes__c'];
    Rtypedef = [select Id from RecordType where Name=:'Definition' and SobjectType=:'SVMXC__Counter_Details__c'];
    RtypeReading = [select Id from RecordType where Name=:'Reading' and SobjectType=:'SVMXC__Counter_Details__c'];
    
    SVMXC__ServiceMax_Processes__c prs = new SVMXC__ServiceMax_Processes__c();
    prs.SVMXC__Name__c = 'TestCounter1';   
    prs.SVMXC__Select__c = true;
    prs.RecordTypeId = Rtype.Id;
    prs.SVMXC__Rule_Type__c='Counters';
    prs.SVMXC__Description__c = 'Test Desc';
    prs.SVMXC__ProcessID__c='PROCESS11';
    prs.SVMXC__SettingId__c = 'PROCESS11';
    prs.SVMXC__MapID__c='PROCESS11';
    prs.SVMXC__Name__c = 'PROCESS21';
    prs.SVMXC__Sequence__c = 1;
    insert prs;
    
    SVMXC__ServiceMax_Processes__c prs2 = new SVMXC__ServiceMax_Processes__c();
    prs2.SVMXC__Name__c = 'TestCounter2';   
    prs2.SVMXC__Select__c = true;
    prs2.RecordTypeId = Rtype.Id;
    prs2.SVMXC__Rule_Type__c='Counters';
    prs2.SVMXC__Description__c = 'Test Desc2';
    prs2.SVMXC__ProcessID__c='PROCESS11';
    prs2.SVMXC__SettingId__c = 'PROCESS11';
    prs2.SVMXC__MapID__c='PROCESS11';
    prs2.SVMXC__Name__c = 'PROCESS22';
    prs2.SVMXC__Sequence__c = 2;
    insert prs2;
    
    SVMXC__ServiceMax_Processes__c CounterRuleListUTobj = new SVMXC__ServiceMax_Processes__c(SVMXC__Advance_Expression__c='1 0R 2',SVMXC__Description__c='minimal',SVMXC__Name__c='testn',SVMXC__Select__c=true,SVMXC__Rule_Type__c='Counters');
    CounterRuleListUTobj.RecordTypeId=Rtype.Id;
    CounterRuleListUTobj.SVMXC__Name__c = 'TestCounter3';   
    CounterRuleListUTobj.SVMXC__Select__c = true;  
    CounterRuleListUTobj.SVMXC__Rule_Type__c='Counters';
    CounterRuleListUTobj.SVMXC__Description__c = 'Test Desc';
    CounterRuleListUTobj.SVMXC__ProcessID__c='PROCESS11';
    CounterRuleListUTobj.SVMXC__SettingId__c = 'PROCESS11';
    CounterRuleListUTobj.SVMXC__MapID__c='PROCESS11';
    CounterRuleListUTobj.SVMXC__Name__c = 'PROCESS22';
    
    insert CounterRuleListUTobj;
    
    SVMXC__ServiceMax_Config_Data__c TempCnfiglstUTobj = new SVMXC__ServiceMax_Config_Data__c();
    TempCnfiglstUTobj.SVMXC__Expression_Rule__c=prs.Id;
    TempCnfiglstUTobj.SVMXC__Expression_Type__c = 'IPRD_Counters';
    TempCnfiglstUTobj.SVMXC__Sequence__c=1;
    TempCnfiglstUTobj.SVMXC__Operator__c = 'eq' ;
    TempCnfiglstUTobj.SVMXC__Operand__c='GC001';
    TempCnfiglstUTobj.SVMXC__Object_Name__c='product2';
    TempCnfiglstUTobj.SVMXC__Field_Name__c = 'ProductCode'; 
    insert TempCnfiglstUTobj;
    
    SVMXC__Counter_Details__c CounterDefUTobj = new SVMXC__Counter_Details__c();
    CounterDefUTobj.RecordTypeId = RTypedef.Id;
    CounterDefUTobj.SVMXC__Counter_Rule__c = prs.Id;
    CounterDefUTobj.SVMXC__Active__c = true;
    CounterDefUTobj.Counter_Type__c = 'Increasing';
    CounterDefUTobj.Min_Value__c = 50;
    CounterDefUTobj.Max_Value__c = 100;
    CounterDefUTobj.Grows_Reduces_By__c = 10;
    insert CounterDefUTobj;
    
    SVMXC__Counter_Details__c CounterCvrgReadUTobj = new SVMXC__Counter_Details__c();
    CounterCvrgReadUTobj.RecordTypeId = RtypeReading.Id;
    insert CounterCvrgReadUTobj;
    test.starttest();
    SVMXC.IPRD_ManageCounters mcounter = new SVMXC.IPRD_ManageCounters();
    SVMXC__ServiceMax_Processes__c CounterRuleProcess = new SVMXC__ServiceMax_Processes__c();   
    CounterRuleProcess.SVMXC__Select__c=true;
    CounterRuleProcess.SVMXC__Name__c = 'asdf';
        
    mcounter.CounterRuleList.add(CounterRuleProcess);
    mcounter.SVMX_SaveProcessRulewithChild();
    mcounter.RuleNameMap.put(prs.SVMXC__Name__c,1);
    mcounter.SVMX_SaveProcessRulewithChild();
    
    mcounter.getTAG001();
    mcounter.getTAG002();
    mcounter.getTAG003();
    mcounter.getTAG004();
    mcounter.getTAG005();
    mcounter.getTAG006();
    mcounter.getTAG007();
    mcounter.getTAG008();
    mcounter.getTAG009();
    mcounter.getTAG010();
    mcounter.getTAG011();
    mcounter.getTAG012();
    mcounter.getTAG013();
    mcounter.getTAG014();
    mcounter.getTAG015();
    mcounter.getTAG016();
    mcounter.getTAG017();
    mcounter.getTAG018();
    mcounter.getTAG019();
    mcounter.getTAG020();
    mcounter.getTAG021();
    mcounter.getTAG022();
    mcounter.getTAG023();
    mcounter.getTAG024();
    mcounter.getTAG025();
    mcounter.getTAG026();
    mcounter.getTAG027();
    mcounter.getTAG028();
    mcounter.getTAG029();
    mcounter.getTAG030();
    mcounter.getTAG031();
    mcounter.getTAG032();
    mcounter.getTAG033();
    mcounter.getTAG034();
    mcounter.getTAG035();
    mcounter.getTAG036();
    mcounter.getTAG037();
    mcounter.getTAG038();
    mcounter.getTAG039();
    mcounter.getTAG040();
    mcounter.getTAG041();
    mcounter.getTAG042();
    mcounter.getTAG043();
    mcounter.getTAG044();
    mcounter.getTAG045();
    mcounter.getTAG046();
    mcounter.getTAG048();
    mcounter.getTAG049();
    mcounter.getTAG050();
    mcounter.getHLPURL();
    //mcounter.svmxTagList.clear();
    mcounter.getTAG001();
    mcounter.getTAG002();
    mcounter.getTAG003();
    mcounter.getTAG004();
    mcounter.getTAG005();
    mcounter.getTAG006();
    mcounter.getTAG007();
    mcounter.getTAG008();
    mcounter.getTAG009();
    mcounter.getTAG010();
    mcounter.getTAG011();
    mcounter.getTAG012();
    mcounter.getTAG013();
    mcounter.getTAG014();
    mcounter.getTAG015();
    mcounter.getTAG016();
    mcounter.getTAG017();
    mcounter.getTAG018();
    mcounter.getTAG019();
    mcounter.getTAG020();
    mcounter.getTAG021();
    mcounter.getTAG022();
    mcounter.getTAG023();
    mcounter.getTAG024();
    mcounter.getTAG025();
    mcounter.getTAG026();
    mcounter.getTAG027();
    mcounter.getTAG028();
    mcounter.getTAG029();
    mcounter.getTAG030();
    mcounter.getTAG031();
    mcounter.getTAG032();
    mcounter.getTAG033();
    mcounter.getTAG034();
    mcounter.getTAG035();
    mcounter.getTAG036();
    mcounter.getTAG037();
    mcounter.getTAG038();
    mcounter.getTAG039();
    mcounter.getTAG040();
    mcounter.getTAG041();
    mcounter.getTAG042();
    mcounter.getTAG043();
    mcounter.getTAG044();
    mcounter.getTAG045();
    mcounter.getTAG046();
    mcounter.getHLPURL();
    
    mcounter.getCriExpressions();
    mcounter.getCounterRuleProcess();
    mcounter.setCounterRuleProcess(prs);
    mcounter.getDisbaleChkBox();    
    mcounter.setDisbaleChkBox(true);
    system.assertEquals(mcounter.getDisbaleChkBox(),true);
    mcounter.getshowRule();
    mcounter.setshowRule(true);
    mcounter.getDelPRCountRec();
    mcounter.setDelPRCountRec(true);
    system.assertEquals(mcounter.getDelPRCountRec(),true);
    mcounter.getIsRuleBlock();
    mcounter.setIsRuleBlock(true);
    mcounter.getIsPartsBlock();
    mcounter.setIsPartsBlock(true);
    mcounter.getDisbleNewBttn();
    mcounter.setDisbleNewBttn(false);
    mcounter.getDisbleEdtBttn();
    mcounter.setDisbleEdtBttn(false);
    mcounter.getDisbleDelBttn();
    mcounter.setDisbleDelBttn(false);
    mcounter.getCheckAllRules();
    mcounter.getCheckAllCounters();
    mcounter.setCheckAllRules(true);
    mcounter.setCheckAllCounters(true);
    mcounter.uncheckCheckbox();
    mcounter.getDisbaleActiveChkBox();
    mcounter.setDisbaleActiveChkBox(true);
    mcounter.getDisbleSaveBttn();
    mcounter.setDisbleSaveBttn(true);
    mcounter.getCounterRuleList(); //getters and setters end here
    
    mcounter.SVMX_EdtCounterRule();
    mcounter.SVMX_DelCounterRule();
    mcounter.SVMX_AddNewCounterRule();
    mcounter.SVMX_AddnewCounter();
    
    mcounter.SVMX_SaveProcessRulewithChild();
    mcounter.getCounterRecList();  
    mcounter.getDelPrdCount();
    mcounter.setDelPrdCount(true);
    system.assert(mcounter.getDelPrdCount());
    mcounter.SVMX_DelCounterRec();
    mcounter.SVMX_Cancel();
    mcounter.SVMX_GoSetupHome();
    mcounter.getobjSVMXPro();
    mcounter.setobjSVMXPro(prs);
    mcounter.getlstHdrObjOpt();
    mcounter.getlstLineObjOpt();
    List<selectoption> lst = new List<selectoption>(); 
    mcounter.getHdrFldlist();
    mcounter.ClearSelOptList(lst);
    mcounter.OnHdrObjSelect();
    mcounter.sortingSelectOption(lst,true);
    mcounter.sortingSelectOption(lst,false);
    mcounter.getSelectedID();
    mcounter.setSelectedID('');
    mcounter.getSelectedLabel();
    mcounter.setSelectedLabel('');
    ////mcounter.getSR();
    mcounter.getisDateSearch();
    mcounter.getisSearch();
    //mcounter.HdrFind();
    //mcounter.HdrFindDate();
    //mcounter.Do_Search();
    //mcounter.Do_CancelSearch();
    //mcounter.Do_Select();
    //mcounter.OnselectRecord();
    //mcounter.find(CriExpressionsUTobj);
    //mcounter.OnHdrEntryCriFieldSelect();
    map<string,SelectOption> m1 = new map<string,SelectOption>();
    mcounter.ClearSelOptMap(m1);
    mcounter.getDisableValue();
    mcounter.getSelectedIndex();
    mcounter.setSelectedIndex('1');
    system.assertEquals(mcounter.getSelectedIndex(),'1');
    mcounter.HdrADDRow();
    mcounter.HdrDeleteRow();
    //mcounter.SVMX_EdtCounterRule();
    Map<String,Schema.Displaytype> m = new Map<String,Schema.Displaytype>();
    Map<String,String> m2 = new Map<String,String>();
    mcounter.RetriveField('product2', mcounter.Hdrfldlist, mcounter.CriExpressions.mapFieldDispType, mcounter.CriExpressions.FieldApiLable);
    mcounter.RetriveField2('product2', mcounter.Hdrfldlist, mcounter.CriExpressions.mapFieldDispType,mcounter.CriExpressions.FieldApiLable, null);
    mcounter.getDisbleRuleSeqBttn();
    mcounter.setDisbleRuleSeqBttn(true);
    mcounter.getdisplaySeqPopup();
    
    
    mcounter.OnHdrEntryCriFieldSelect();
    mcounter.getDisableCancelBttn();
    mcounter.setDisableCancelBttn(false);
    mcounter.SVMX_OrderSequence();
    mcounter.getSeqoptions();
    mcounter.getitems();
    mcounter.setitems(new String[10]);
    mcounter.shuffle(1,true);
    mcounter.UP();
    mcounter.Down();
    mcounter.Top();
    mcounter.Bottom();
    //mcounter.SVMX_SaveSequence();
    mcounter.RetriveField('Account',new List<selectOption>(),new Map<String,Schema.Displaytype>(),new Map<String,String>(),Account.AccountNumber.getDescribe().getType() ,'Account');
    mcounter.getSR();
    mcounter.HdrFind();
    mcounter.Do_Search();
    mcounter.Do_Select();
    mcounter.HdrFindDate();
    mcounter.Do_CancelSearch();
    mcounter.OnselectRecord();
    mcounter.OnselectCurrentUser();
    mcounter.find(new COMM_SVMXC_Search_Expressions());
    mcounter.AddException('Str');
    mcounter.IsValidString('Str');
    mcounter.getDisplayNameChangeWarnBtn();
    mcounter.setDisplayNameChangeWarnBtn(true);
    mcounter.ChangeNameYes();
    mcounter.ChangeNameNo();
    try {
        mcounter.SVMX_SaveSequence();    
    }
    catch(Exception ex ) {}
    
    mcounter.OnselectRecordOwner();
        
    test.stoptest();
    }
}