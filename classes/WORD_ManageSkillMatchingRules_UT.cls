@isTest
private class WORD_ManageSkillMatchingRules_UT 
{ 
    static testMethod void WORD_ManageSkillMatchingRulestest()
    {
        WORD_ManageSkillMatchingRules objrule = new WORD_ManageSkillMatchingRules();
        WORD_ManageSkillMatchingRules.ConfigExpWrapper wrapObj = new WORD_ManageSkillMatchingRules.ConfigExpWrapper();
        wrapObj.getobjConf();
        wrapObj.getstrselSkillName();
        wrapObj.getIsSelected();                 
        RecordType rtype = [select id from RecordType where Name=:'SVMX Rule']; 
        RecordType RC = [select id, Name, SobjectType from RecordType where Name = 'Expressions' and SobjectType ='SVMXC__ServiceMax_Config_Data__c'];
        SVMXC__ServiceMax_Processes__c objSkillrule1 = new SVMXC__ServiceMax_Processes__c();
        objSkillrule1.RecordTypeId = rtype.Id;  
        objrule.strProcessName = 'Skill Rule Test';
        objrule.strDescription = 'Description Rule Test';
        objrule.isactive = true;       
        objrule.newSkillMatchRule();
        objrule.saveSkillMatchRule();    
        objSkillrule1.SVMXC__Name__c = 'Skill Rule Test1';
        objSkillrule1.SVMXC__Description__c = 'Skill Rule Test1';
        objSkillrule1.SVMXC__Select__c = true;               
        //objSkillrule1.SVMXC__Rule_Type__c = 'Skill Matching';
        objSkillrule1.SVMXC__Source_Object_Name__c = 'SVMXC__Service_Order__c';
        objSkillrule1.SVMXC__Sequence__c = 0.0000;
        objSkillrule1.SVMXC__Rule_Type__c = 'Skill Matching';
        objSkillrule1.RecordTypeId = objrule.ExpHdr_Rtype_Id;
        insert objSkillrule1;
        
        SVMXC__ServiceMax_Processes__c objSkillrule2 = new SVMXC__ServiceMax_Processes__c();
        objSkillrule2.RecordTypeId = rtype.Id;
        objSkillrule2.SVMXC__Name__c = 'Skill Rule Test2';
        objSkillrule2.SVMXC__Description__c = 'Skill Rule Test2';
        objSkillrule2.SVMXC__Select__c = false;
        objSkillrule2.SVMXC__Sequence__c = 1.0000;
        //objSkillrule2.SVMXC__Rule_Type__c = 'Skill Rule';
        objSkillrule2.SVMXC__Rule_Type__c = 'Skill Matching';
        objSkillrule2.SVMXC__Source_Object_Name__c = 'SVMXC__Service_Order__c';
        objSkillrule2.RecordTypeId = objrule.ExpHdr_Rtype_Id;
        insert objSkillrule2;
         SVMXC__ServiceMax_Processes__c objSkillrule3 = new SVMXC__ServiceMax_Processes__c();
        objSkillrule3.RecordTypeId = rtype.Id;
        objSkillrule3.SVMXC__Name__c = 'Skill Rule Test2';
        objSkillrule3.SVMXC__Description__c = 'Skill Rule Test2';
        objSkillrule3.SVMXC__Select__c = false;
        objSkillrule3.SVMXC__Sequence__c = 1.0000;
        //objSkillrule3.SVMXC__Rule_Type__c = 'Skill Rule';
        objSkillrule3.SVMXC__Rule_Type__c = 'Skill Matching';
        objSkillrule3.SVMXC__Source_Object_Name__c = 'SVMXC__Service_Order__c';
        objSkillrule3.RecordTypeId = objrule.ExpHdr_Rtype_Id;
        insert objSkillrule3;
        objrule.strSkillid = objSkillrule2.id;
        objrule.newSkillMatchRule();
        objrule.strProcessName='Skill Rule Test2 ch';
        objrule.saveSkillMatchRule();
        
        objrule.lstSkillMatchRules.add(objSkillrule1);
        objrule.lstSkillMatchRules.add(objSkillrule2);
        system.debug('lstSkillMatchRules val' + objrule.lstSkillMatchRules);
        objrule.strSkillid = objSkillrule2.id;
        system.debug('strSkillid val' + objrule.strSkillid);
        objrule.buildSkillMatchingRulesTree();
        SVMXC__Skill__c Skillobj1 = new SVMXC__Skill__c();
        Skillobj1.Name = 'SkillInstall1';
        Skillobj1.SVMXC__Skill_Category__c = 'Installation';
        //Skillobj1.SVMXC__Skill__Tag = 'Electric';
        insert Skillobj1;
        
        SVMXC__Skill__c Skillobj2 = new SVMXC__Skill__c();
        Skillobj2.Name = 'SkillInstall2';
        Skillobj2.SVMXC__Skill_Category__c = 'Installation';
        //Skillobj2.SVMXC__Skill__Tag = 'Electric';
        insert Skillobj2;   
        List<String> ListSkillid = new List<String>();
        ListSkillid.add(Skillobj1.id);
        ListSkillid.add(Skillobj2.id); 
        objrule.setstrSelSkill(ListSkillid);
        objrule.moveskill();
        objrule.strSelSkill.addall(ListSkillid);
        objrule.moveskill();
        objrule.LstCriWrap[1].IsSelected = true;
        objrule.strSelSkillCategory =objrule.getTAG038();        
        objrule.StrSkillTagToMatch =null;
        objrule.searchSkillonCategoryandTag();
        objrule.StrSkillTagToMatch ='Electric';
        objrule.searchSkillonCategoryandTag();      
        objrule.StrSkillTagToMatch = null ;
        objrule.strSelSkillCategory ='Installation'; 
        objrule.isCategoryandTagSearched=false;
        objrule.searchSkillonCategoryandTag();
        objrule.StrSkillTagToMatch ='Electric';     
        objrule.searchSkillonCategoryandTag();  
        objrule.Removeskill();
        objrule.isCategoryandTagSearched = true;
         objrule.Removeskill();
        objrule.editSkillMatchRule(); 
        objrule.SVMX_OrderSequence();
        objrule.getSeqoptions();
        ListSkillid = new List<String>();
        ListSkillid.add(objSkillrule1.id); 
        ListSkillid.add(objSkillrule3.id); 
        objrule.setstrSkillidRearrange(ListSkillid);
        system.debug('lstParentSkillMatchRules val '+objrule.lstParentSkillMatchRules);
       
        objrule.UP();
        objrule.Down();
        objrule.Top();
        objrule.Bottom();
        //objrule.SVMX_SaveSequence();
        SVMXC__ServiceMax_Config_Data__c confobj = new  SVMXC__ServiceMax_Config_Data__c();
       // confobj.SVMXC__Expression_Type__c = 'Skill rule';
        confobj.RecordTypeId =RC.id;
        confobj.SVMXC__Expression_Rule__c = objSkillrule1.id;
        confobj.SVMXC__Expression_Type__c = 'Skill_Eligibility';
        confobj.SVMXC__Field_Name__c = 'SVMXC__City__c';
        confobj.SVMXC__Operator__c = 'eq';
        confobj.SVMXC__Operand__c = 'Bangalore';
        insert confobj;
        wrapObj.setobjConf(confobj);
        wrapObj.setstrselSkillName('ABCD');        
        wrapObj.setIsSelected(true);
        objrule.lstSkillMatchConfig.add(confobj);            
        SVMXC__ServiceMax_Config_Data__c confobj1 = new  SVMXC__ServiceMax_Config_Data__c();
        confobj1.SVMXC__Expression_Type__c = 'Skill_Eligibility';
        confobj1.RecordTypeId = RC.id;
        confobj1.SVMXC__Expression_Rule__c = objSkillrule1.id;
        confobj1.SVMXC__Field_Name__c = 'SVMXC__City__c';
        confobj1.SVMXC__Operator__c = 'eq';
        confobj1.SVMXC__Operand__c = 'SVMXC__City__c';
        insert confobj1; 
        SVMXC__ServiceMax_Config_Data__c confobj2 = new  SVMXC__ServiceMax_Config_Data__c();
        confobj1.SVMXC__Skill__c = Skillobj2.id;
        confobj1.RecordTypeId = objrule.ExpDtl_AppSkill_Id;
        confobj1.SVMXC__Expression_Rule__c = objSkillrule1.id;        
        insert confobj2;                         
        objrule.lstSkillMatchConfig.add(confobj2);    
            
        objrule.saveSkillMatchRule();             
        objrule.SpecialCharParser('a#$%');
        objrule.CheckNull(null);
        objrule.CheckNull('abc');
        objrule.strSelSkillCategory =objrule.getTAG038();        
        objrule.StrSkillTagToMatch =null;
        objrule.searchSkillonCategoryandTag();
        objrule.StrSkillTagToMatch ='Electric';
        objrule.searchSkillonCategoryandTag();
        objrule.cancelSkillMatchRule();
        
        objrule.moveSkill();
        objrule.RemoveSkill();
        system.assert(objrule.getTAG001()!= null,'TAG001 assertion failed');
        system.assert(objrule.getTAG002()!= null,'TAG002 assertion failed');
        system.assert(objrule.getTAG003()!= null,'TAG003 assertion failed');
        system.assert(objrule.getTAG004()!= null,'TAG004 assertion failed');
        system.assert(objrule.getTAG005()!= null,'TAG005 assertion failed');
        system.assert(objrule.getTAG006()!= null,'TAG006 assertion failed');
        system.assert(objrule.getTAG007()!= null,'TAG007 assertion failed');
        system.assert(objrule.getTAG008()!= null,'TAG008 assertion failed');
        system.assert(objrule.getTAG009()!= null,'TAG009 assertion failed');
        system.assert(objrule.getTAG011()!= null,'TAG011 assertion failed');
        system.assert(objrule.getTAG012()!= null,'TAG012 assertion failed');
        system.assert(objrule.getTAG013()!= null,'TAG013 assertion failed');
        system.assert(objrule.getTAG014()!= null,'TAG014 assertion failed');
        system.assert(objrule.getTAG015()!= null,'TAG015 assertion failed');
        system.assert(objrule.getTAG016()!= null,'TAG016 assertion failed');
        system.assert(objrule.getTAG017()!= null,'TAG017 assertion failed');
        system.assert(objrule.getTAG018()!= null,'TAG018 assertion failed');
        system.assert(objrule.getTAG019()!= null,'TAG019 assertion failed');
        system.assert(objrule.getTAG020()!= null,'TAG020 assertion failed');
        system.assert(objrule.getTAG021()!= null,'TAG021 assertion failed');
        system.assert(objrule.getTAG022()!= null,'TAG022 assertion failed');
        system.assert(objrule.getTAG023()!= null,'TAG023 assertion failed');
        system.assert(objrule.getTAG024()!= null,'TAG024 assertion failed');
        system.assert(objrule.getTAG025()!= null,'TAG025 assertion failed');
        system.assert(objrule.getTAG001()!= null,'TAG001 assertion failed');
        system.assert(objrule.getTAG002()!= null,'TAG002 assertion failed');
        system.assert(objrule.getTAG003()!= null,'TAG003 assertion failed');
        system.assert(objrule.getTAG004()!= null,'TAG004 assertion failed');
        system.assert(objrule.getTAG005()!= null,'TAG005 assertion failed');
        system.assert(objrule.getTAG006()!= null,'TAG006 assertion failed');
        system.assert(objrule.getTAG007()!= null,'TAG007 assertion failed');
        system.assert(objrule.getTAG008()!= null,'TAG008 assertion failed');
        system.assert(objrule.getTAG009()!= null,'TAG009 assertion failed');
        system.assert(objrule.getTAG011()!= null,'TAG011 assertion failed');
        system.assert(objrule.getTAG012()!= null,'TAG012 assertion failed');
        system.assert(objrule.getTAG013()!= null,'TAG013 assertion failed');
        system.assert(objrule.getTAG014()!= null,'TAG014 assertion failed');
        system.assert(objrule.getTAG015()!= null,'TAG015 assertion failed');
        system.assert(objrule.getTAG016()!= null,'TAG016 assertion failed');
        system.assert(objrule.getTAG017()!= null,'TAG017 assertion failed');
        system.assert(objrule.getTAG018()!= null,'TAG018 assertion failed');
        system.assert(objrule.getTAG019()!= null,'TAG019 assertion failed');
        system.assert(objrule.getTAG020()!= null,'TAG020 assertion failed');
        system.assert(objrule.getTAG021()!= null,'TAG021 assertion failed');
        system.assert(objrule.getTAG022()!= null,'TAG022 assertion failed');
        system.assert(objrule.getTAG023()!= null,'TAG023 assertion failed');
        system.assert(objrule.getTAG024()!= null,'TAG024 assertion failed');
        system.assert(objrule.getTAG025()!= null,'TAG025 assertion failed');
        system.assert(objrule.getTAG026()!= null,'TAG025 assertion failed');
        system.assert(objrule.getTAG027()!= null,'TAG025 assertion failed');
        system.assert(objrule.getTAG028()!= null,'TAG025 assertion failed');
        system.assert(objrule.getTAG029()!= null,'TAG025 assertion failed');
        system.assert(objrule.getTAG030()!= null,'TAG025 assertion failed');
        objrule.getTAG031();
        objrule.getTAG032();
        objrule.getTAG033();
        objrule.getTAG034();
        objrule.getTAG035();
        objrule.getTAG036();
        objrule.getTAG037();
        objrule.getTAG038();
        objrule.getTAG039();
        objrule.getTAG040();
        objrule.getTAG041();
        objrule.getTAG042();
        objrule.getTAG043();
        objrule.getTAG044();
        objrule.getTAG045();
        objrule.getTAG046();
        objrule.getTAG047();
        objrule.getTAG048();
        objrule.getTAG049();
        objrule.getTAG050();
        objrule.getTAG051();
        objrule.getTAG052();
        objrule.getTAG053();
        objrule.getTAG054();
        objrule.getTAG055();
        objrule.getTAG056();
        objrule.getTAG057();
        objrule.getTAG058();
        objrule.getTAG059();
        objrule.getTAG060();
        objrule.getTAG061();
         objrule.getTAG062();
        objrule.getHLPURL();
        objrule.getHLPTITLE();
        objrule.getstrSelSkill();
        objrule.getdisplaySeqPopup();
        objrule.getisRenderRuleSeq();
        objrule.getobjSkill();
        objrule.IsValidString('ABCD');
        objrule.getlstSkillMatchRules();        
        objrule.getobjSkillMatch();       
        objrule.getlstWOfield();
        objrule.getlstAvailableSkill();
        objrule.getlstOperatorSelectLst();       
        objrule.getlstSkillCategory();
        objrule.getisNewOrEdit();
        objrule.getlstSkillMatchConfigSize();       
        objrule.getXMLResult();
        objrule.getstrSkillid();    
        objrule.getLstCriWrap();  
        objrule.getlstSkillMatchConfig();
        objrule.getlstApplicableSkillsConfig(); 
        objrule.getLstCriWrapSize();    
        objrule.strSkillid = objSkillrule2.id;
        objrule.editSkillMatchRule();
        objrule.setisNewOrEdit(true);
        objrule.setlstSkillMatchConfig(objrule.lstSkillMatchConfig);    
        objrule.setlstApplicableSkillsConfig(objrule.lstSkillMatchConfig);
        objrule.setobjSkill(Skillobj2);
        objrule.SVMX_GoSetupHome();
        objrule.shuffle(1,true);
        objrule.shuffle(1,false);
       // SVMXC__ServiceMax_Config_Data__c confobj2 = new  SVMXC__ServiceMax_Config_Data__c();
        //confobj2.SVMXC__Skill__c=Skillobj2.id;
        SVMXC__ServiceMax_Config_Data__c confobj3 = new  SVMXC__ServiceMax_Config_Data__c();
        confobj2.SVMXC__Skill__c = Skillobj1.id;
        objrule.strSkillid = objSkillrule2.id;
        objrule.buildTree(objSkillrule2.id);
        objrule.deleteSkillMatchRule();
        objrule.getstrSkillidRearrange();
       
    }
    
    static testMethod void WORD_ManageSkillMatchingRulestest1()
    {   
        WORD_ManageSkillMatchingRules objrule = new WORD_ManageSkillMatchingRules();
        objrule.newSkillMatchRule();
        objrule.saveSkillMatchRule();       
        objrule.getTAG063();       
        objrule.setstrSkillid('123aoc4578908');       
        objrule.setisRenderRuleSeq(true);       
         
    }
}